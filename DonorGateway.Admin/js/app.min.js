//app.module.js
(function() {
        var module = angular.module('app',
            [
                //angular modules
                'ngMessages',
                'angularLocalStorage',
                'ngRoute',
                'ngAnimate',

                //third party modules
                'angular-duration-format', 
                'smart-table',
                'ui.bootstrap',
                'ngTagsInput',
                'ngFileUpload',
                'ngFileReader',
                'rzModule',
                'switcher',
                'gfl.textAvatar',
                'textAngular',
                'ui.bootstrap.datetimepicker',
                'angular-confirm', 
                'toastr'
            ]
        ); 

        module.config(['toastrConfig', function (toastrConfig) {
            angular.extend(toastrConfig, {
                positionClass: 'toast-bottom-right',
                newestOnTop: true,
                allowHtml: false,
                closeButton: false,
                closeHtml: '<button>&times;</button>',
                extendedTimeOut: 1000,
                iconClasses: {
                    error: 'toast-error',
                    info: 'toast-info',
                    success: 'toast-success',
                    warning: 'toast-warning'
                },
                messageClass: 'toast-message',
                onHidden: null,
                onShown: null,
                onTap: null,
                progressBar: false,
                tapToDismiss: true,
                templates: {
                    toast: 'directives/toast/toast.html',
                    progressbar: 'directives/progressbar/progressbar.html'
                },
                timeOut: 5000,
                titleClass: 'toast-title',
                toastClass: 'toast'
            });
        }]);

    }
)();
//demographic-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, log) {
        var $ctrl = this;
        var tableStateRef;
        var pageSizeDefault = 10;

        $ctrl.title = 'Demographic Updates';
        $ctrl.description = 'Updates made to constituent data';
        $ctrl.subTitle = 'Demographics';

        $ctrl.searchModel = {
            page: 1,
            pageSize: pageSizeDefault
        };

        $ctrl.sources = [
            { id: null, name: '' },
            { id: 0, name: 'Tax' },
            { id: 1, name: 'RSVP' }
        ];

        $ctrl.$onInit = function () { console.log('event detail init'); }

        $ctrl.search = function (tableState) {
            tableStateRef = tableState;
            $ctrl.isBusy = true;
            console.log('search', $ctrl.searchModel);

            if (typeof (tableState.sort.predicate) !== "undefined") {
                $ctrl.searchModel.orderBy = tableState.sort.predicate;
                $ctrl.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }

            return $http.get('api/demographic', { params: $ctrl.searchModel })
                .then(function (r) {
                    $ctrl.demographics = r.data.results;
                    $ctrl.searchModel = r.data;
                    delete $ctrl.searchModel.results;
                }).catch(function (err) {
                    console.log('Oops', err.data.message);
                    toastr.error('Oops ' + err.data.message);
                }).finally(function () {
                    $ctrl.isBusy = false;
                });
        }

        $ctrl.delete = function (d) {
            $ctrl.isBusy = true;
            console.log('d', d);
            $http.delete('api/demographic/' + d.id).then(function (r) {
                var idx = $ctrl.demographics.indexOf(d);
                $ctrl.demographics.splice(idx, 1);
                log.success('Record updated');
            }).catch(function (err) {
                console.log('Oops', err);
                console.log(err);
                log.error('Oops. Something went wrong. ' + err.data.message);
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.deleteAll = function () {
            $ctrl.isBusy = true;
            return $http.delete('api/demographic').then(function (r) {
                log.warning('Updated all records');
                $ctrl.searchModel(tableStateRef);
            }).catch(function (err) {
                console.log('Oops', err);
                log.error('Oops. Something went wrong. ' + err.data.message);
            }).finally(function () {
                $ctrl.isBusy = false;
            });

        }

        $ctrl.export = function () {
            $ctrl.isBusy = true;
            $http.get('api/demographic/export', { params: $ctrl.searchModel })
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        logger.log(ex);
                    }
                }).finally(function () {
                    $ctrl.isBusy = false;
                });
        }


        $ctrl.paged = function paged() {
            $ctrl.search(tableStateRef);
        };

    }

    module.component('demographicList',
        {
            bindings: {
            },
            templateUrl: 'app/demographics/demographic-list.component.html',
            controller: ['$http', 'toastr', controller]
        });
}
)();
//mark.lawrence
//clear-key.directive.js

(function () {
    angular.module('app').directive("clearKey", function () {
        return {
            restrict: 'EA',
            require: 'ngModel',
            link: function (scope, el, attrs, ctrl) {
                el.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    ctrl.$setViewValue(null);
                    ctrl.$render();
                    scope.$apply();
                });
            }
        };
    });
})();
//mark.lawrence
//date-before.directive.js

(function () {
    angular.module('app').directive('dateBefore', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elem, attrs, ngModel) {
                if (!ngModel) return; // do nothing if no ng-model
                debugger;
                var dateBefore = attrs.dateBefore;
                console.log('date', dateBefore);

                // watch own value and re-validate on change
                scope.$watch(attrs.ngModel, function () {
                    validate();
                });

                // observe the other value and re-validate on change
                attrs.$observe('dateGreaterAndEqual', function (val) {
                    validate();
                });

                var validate = function () {
                    // values
                    var dateTo = angular.isDefined(ngModel.$viewValue) === true && !_.isNull(ngModel.$viewValue) ? moment(ngModel.$viewValue).toDate() : null;
                    var dateFrom = attrs.dateGreaterAndEqual !== "" ? moment(attrs.dateGreaterAndEqual.replace('"', '').replace('\\', '').replace('"', '')).toDate() : null;
                    //passing date with braces around it causes and issue therfore we need to use replace

                };
            }
        };
    });


})();
//mark.lawrence
//date-format.directive.js

(function () {
    angular.module('app')
        .directive('dateFormat',
            function (dateFilter, $parse) {
                return {
                    restrict: 'EAC',
                    require: '?ngModel',
                    link: function (scope, element, attrs, ngModel, ctrl) {
                        ngModel.$parsers.push(function (viewValue) {
                            return dateFilter(viewValue, 'MM/dd/yyyy h:mm a');
                        });
                    }
                }
            });
})();
//mark.lawrence
//date-input.directive.js

(function () {
    angular.module('app').directive('dateInput', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elm, attrs, ctrl) {
                var moment = $window.moment;
                var dateFormat = attrs.dateInput;
                attrs.$observe('dateInput', function (newValue) {
                    if (dateFormat === newValue || !ctrl.$modelValue) return;
                    dateFormat = newValue;
                    ctrl.$modelValue = new Date(ctrl.$setViewValue);
                });

                ctrl.$formatters.unshift(function (modelValue) {
                    scope = scope;
                    if (!dateFormat || !modelValue) return "";
                    var retVal = moment(modelValue).format(dateFormat);
                    return retVal;
                });

                ctrl.$parsers.unshift(function (viewValue) {
                    scope = scope;
                    var date = moment(viewValue, dateFormat);
                    return (date && date.isValid() && date.year() > 1950) ? date.toDate() : "";
                });
            }
        };
    });
})();
//event-url.directive.js

var app = angular.module('app');

app.directive('eventurl', function ($q, $timeout, $http) {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$asyncValidators.name = function (modelValue, viewValue) {

                if (ctrl.$isEmpty(modelValue)) {
                    // consider empty model valid
                    return $q.resolve();
                }

                var def = $q.defer();

                $http.get('api/event/eventnameurlavailable/' + modelValue).then(function (r) {
                    if (r.data) {
                        def.resolve();
                    } else {
                        def.reject();
                    }
                });

                return def.promise;
            };
        }
    };
});



//mark.lawrence
//smart-table.clearKey.js

(function () {
    angular.module('app').directive("stClearKey", function () {
        return {
            restrict: 'EA',
            require: ['^stTable', '^ngModel'],
            link: function (scope, element, attrs, ctrls) {
                element.on('keydown', function (event) {
                    var ngModel = ctrls[1];
                    var ctrl = ctrls[0];

                    if (event.which === 13) {
                        return ctrl.pipe();
                    }
                    if (event.which === 27) {

                        if (element.context.attributes['st-search'] !== undefined) {
                            return scope.$apply(function () {
                                var fieldName = element.context.attributes['st-search'].value;
                                var tableState = ctrl.tableState();
                                tableState.search.predicateObject[fieldName] = '';
                                return ctrl.pipe();
                            });

                        } else {
                            return scope.$apply(function () {
                                ngModel.$setViewValue(null);
                                ngModel.$render(); // will update the input value as well
                            });

                        }
                    }
                });
            }
        };
    });

    angular.module('app')
        .directive("stResetSearch",
            function () {
                return {
                    restrict: 'EA',
                    require: ['^stTable', '^ngModel'],
                    link: function (scope, element, attrs, ctrls) {
                        return element.bind('click',
                            function () {
                                var model = ctrls[1];
                                var ctrl = ctrls[0];

                                return scope.$apply(function () {
                                    angular.forEach(model.$viewValue,
                                        function (value, key) {
                                            if (key.toLowerCase() === 'page') {
                                                model.$viewValue[key] = 1;
                                            }
                                            if (Array.isArray(value) || _.includes(key.toLowerCase(), 'page')) return;
                                            model.$viewValue[key] = null;
                                        });
                                    var tableState = ctrl.tableState();
                                    tableState.search.predicateObject = {};
                                    tableState.pagination.start = 0;
                                    return ctrl.pipe();
                                });
                            });
                    }
                };
            });

    angular.module('app').directive('stSubmitSearch', ['stConfig', '$timeout', '$parse', function (stConfig, $timeout, $parse) {
        return {
            require: '^stTable',
            link: function (scope, element, attr, ctrl) {
                return element.bind('click',
                    function () {
                        var tableCtrl = ctrl;
                        tableCtrl.pipe();
                    });

            }
        };
    }]);


    angular.module('smart-table')
      .directive('stSearch', ['stConfig', '$timeout', '$parse', function (stConfig, $timeout, $parse) {
          return {
              require: '^stTable',
              link: function (scope, element, attr, ctrl) {
                  var tableCtrl = ctrl;
                  var promise = null;
                  var throttle = attr.stDelay || stConfig.search.delay;
                  var event = attr.stInputEvent || stConfig.search.inputEvent;

                  attr.$observe('stSearch', function (newValue, oldValue) {
                      var input = element[0].value;
                      if (newValue !== oldValue && input) {
                          ctrl.tableState().search = {};
                          tableCtrl.search(input, newValue);
                      }
                  });

                  //table state -> view
                  scope.$watch(function () {
                      return ctrl.tableState().search;
                  }, function (newValue, oldValue) {
                      var predicateExpression = attr.stSearch || '$';
                      if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {
                          element[0].value = $parse(predicateExpression)(newValue.predicateObject) || '';
                      }
                  }, true);

                  // view -> table state
                  element.bind(event, function (evt) {
                      evt = evt.originalEvent || evt;
                      if (promise !== null) {
                          $timeout.cancel(promise);
                      }

                      promise = $timeout(function () {
                          tableCtrl.search(evt.target.value, attr.stSearch || '');
                          promise = null;
                      }, throttle);
                  });
              }
          };
      }]);

})();
(function() {


    var app = angular.module('app');

    app.directive('toggleCheckbox', function($timeout) {

        /**
     * Directive
     */
        return {
            restrict: 'A',
            transclude: true,
            replace: false,
            require: 'ngModel',
            link: function($scope, $element, $attr, ngModel) {

                // update model from Element
                var updateModelFromElement = function() {
                    // If modified
                    var checked = $element.prop('checked');
                    if (checked !== ngModel.$viewValue) {
                        // Update ngModel
                        ngModel.$setViewValue(checked);
                        $scope.$apply();
                    }
                };

                // Update input from Model
                var updateElementFromModel = function(newValue) {
                    $element.trigger('change');
                };

                // Observe: Element changes affect Model
                $element.on('change', function() {
                    updateModelFromElement();
                });

                $scope.$watch(function() {
                    return ngModel.$viewValue;
                }, function(newValue) {
                    updateElementFromModel(newValue);
                }, true);

                // Initialise BootstrapToggle
                $element.bootstrapToggle();
            }
        };
    });
})();
//constituent-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http) {
        var $ctrl = this;

        $ctrl.$onInit = function () {
            console.log('constituent edit init');
            if ($ctrl.resolve) {
                $ctrl.person = angular.copy($ctrl.resolve.person);
            }

            $ctrl.title = $ctrl.person.name;
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            console.log('save', $ctrl.person);
            $http.put('api/constituent', $ctrl.person).then(function(r) {
                $ctrl.modalInstance.close($ctrl.person);
            });
        }
    }

    module.component('constituentEdit',
        {
            bindings: {
                person: '<',
                resolve: '<',
                close: '&',
                dismiss: '&',
                modalInstance: '<'
            },
            templateUrl: 'app/donortax/constituent-edit.component.html',
            controller: ['$http', controller]
        });

}
)();
//tax-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, toastr, $modal) {
        var $ctrl = this;
        var tableStateRef;
        var pageSizeDefault = 10;

        $ctrl.title = 'Donor Tax Manager';
        $ctrl.subTitle = 'Constituents';

        $ctrl.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };

        $ctrl.$onInit = function () {
            console.log('tax list init');
        }

        $ctrl.search = function (tableState) {
            tableStateRef = tableState;

            if (typeof (tableState.sort.predicate) !== "undefined") {
                $ctrl.searchModel.orderBy = tableState.sort.predicate;
                $ctrl.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }

            $ctrl.isBusy = true;
            console.log('model', $ctrl.searchModel);
            $http.get('api/constituent', { params: $ctrl.searchModel })
                .then(function (r) {
                    $ctrl.people = r.data.results;
                    $ctrl.searchModel = r.data;
                    delete $ctrl.searchModel.results;
                    $ctrl.isBusy = false;
                });
        }

        $ctrl.paged = function paged(pageNum) {
            $ctrl.search(tableStateRef);
        };

        $ctrl.edit = function (person) {
            $modal.open({
                component: 'constituentEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    person: person
                },
                size: 'lg'
            }).result.then(function (result) {
                angular.extend(person, result);
                toastr.info('Saved ' + result.name);
            }, function (reason) {
            });
        }

        $ctrl.viewTaxes = function (person) {
            console.log('view tax', person);
            $modal.open({
                component: 'taxDetail',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    person: person
                },
                size: 'md'
            }).result.then(function (result) {
                angular.extend(item, result);
                toastr.info('Saved ' + result.title);
            }, function (reason) {
            });
        }
    }

    module.component('constituentList',
        {
            templateUrl: 'app/donortax/constituent-list.component.html',
            controller: ['$http', 'toastr', '$uibModal', controller]
        });
}
)();
//tax-detail.component.js
(function () {
    var module = angular.module('app');

    function getYears(currentYear) {
        var years = [];
        //var currentYear = parseInt(moment().get('Year'));

        for (var i = 0; i < 5; i++) {
            years.push(currentYear - i);
        }
        return years;
    }

    function controller($http, toastr) {
        var $ctrl = this;
        var currentYear = parseInt(moment().get('Year'));

        $ctrl.$onInit = function () {
            console.log('tax detail init');
            $ctrl.isBusy = true;
            $ctrl.newItem = {};

            if ($ctrl.resolve) {
                $ctrl.person = $ctrl.resolve.person;
            }

            $ctrl.title = $ctrl.person.firstName + ' ' + $ctrl.person.lastName;
            $ctrl.selectedYear = currentYear - 1;
            $ctrl.years = getYears(currentYear);
            $ctrl.yearChange();

            $http.get('api/tax/' + $ctrl.person.lookupId).then(function (r) {
                $ctrl.taxItems = r.data;
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.addItem = function() {
            $ctrl.isBusy = true;

            $ctrl.newItem.constituentId = $ctrl.person.id;
            $ctrl.newItem.taxYear = moment($ctrl.newItem.donationDate).year();

            $http.post('api/tax', $ctrl.newItem ).then(function(r) {
                $ctrl.taxItems.push(r.data);
                toastr.success('Saved tax entry');
            }).catch(function(err) {
                toastr.error('Oops. Error creating tax entry');
            }).finally(function() {
                $ctrl.isBusy = false; 
            });
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.cancelEdit = function () {
            $ctrl.currentEdit = {};
        }

        $ctrl.delete = function(item) {
            $ctrl.isBusy = true;

            $http.delete('api/tax/' + item.id).then(function(r) {
                toastr.warning('Delete tax item ' + item.amount);
                var idx = $ctrl.taxItems.indexOf(item);
                $ctrl.taxItems.splice(idx, 1);
            }).catch(function(err) {
                toastr.error('Oops. Error deleting tax');
            }).finally(function() {
                $ctrl.isBusy = false;
            }); 
        }

        $ctrl.edit = function (item) {
            console.log('item', item);
            $ctrl.currentEdit = {};
            $ctrl.currentEdit[item.id] = true;
            $ctrl.itemToEdit = angular.copy(item);
            $ctrl.itemToEdit.donationDate = moment($ctrl.itemToEdit.donationDate).toDate();
        }

        $ctrl.save = function (item) {
            $ctrl.isBusy = true;
            $http.put('api/tax', $ctrl.itemToEdit)
                .then(function (r) {
                    angular.extend(item, r.data);
                    $ctrl.currentEdit = {};
                    toastr.success('Updated tax item ' + moment(item.donationDate).format('MM/dd/yyyy'));
                }).catch(function(err) {
                    toastr.error('Error saving tax entry');
                }).finally(function() {
                    $ctrl.isBusy = false; 
                });
        }

        $ctrl.yearChange = function () {
            $ctrl.dateOptions = {
                maxDate: new Date('12/30/' + $ctrl.selectedYear),
                minDate: new Date('1/1/' + $ctrl.selectedYear)
            };
            $ctrl.newItem.donationDate = $ctrl.dateOptions.minDate;
        }

    }

    module.component('taxDetail',
        {
            bindings: {
                person: '<',
                resolve: '<',
                close: '&',
                dismiss: '&',
                modalInstance: '<'
            },
            templateUrl: 'app/donortax/tax-details.component.html',
            controller: ['$http', 'toastr', controller]
        });

}
)();
//mark.lawrence
//env.js

(function (window) {
    window.__env = window.__env || {};

    switch (window.location.hostname) {
        case 'donorgatewaystage.azurewebsites.net':
            window.__env.rsvpUrl = 'eventrsvpstage.azurewebsites.net';
            break;
        case 'donorgatewaystage.splcenter.org':
            window.__env.rsvpUrl = 'rsvpstage.splcenter.org';
            break;
        case 'donorgateway.splcenter.org':
            window.__env.rsvpUrl = 'rsvp.splcenter.org';
            break;
        case 'donorgateway.azurewebsites.net':
            window.__env.rsvpUrl = 'eventrsvp.azurewebsites.net';
            break;
        default:
            window.__env.rsvpUrl = 'localhost:53172';
    }

    // API url
    window.__env.apiUrl = 'http://' + window.location.host + '/api';

    // Base url
    window.__env.baseUrl = '/';

    // Whether or not to enable debug mode
    // Setting this to false will disable console output
    window.__env.enableDebug = true;
}(this));
//event-create.component.js
(function () {
    var module = angular.module('app');

    function controller($http, log) {
        var $ctrl = this;

        $ctrl.title = 'Create Event';
        $ctrl.dateFormat = "MM/DD/YYYY hh:mm";


        $ctrl.$onInit = function () {
            $ctrl.event = {
                startDate: new Date(),
                capacity: 1,
                template: {}
            };
        }

        $ctrl.cancel = function () {
            $modal.dismiss();
        }

        $ctrl.save = function () {
            $http.post('api/event', $ctrl.event).then(function (r) {
                angular.extend($ctrl.event, r.data);
                console.log('event', $ctrl.event);
                $ctrl.modalInstance.close($ctrl.event);
            }).catch(function (err) {
                console.log('Oops. Something went wrong saving event', err);
                log.error('Oops. Something went wrong saving event');
            });
        }

    }

    module.component('eventCreate',
        {
            bindings: {
                resolve: '<',
                close: '&',
                dismiss: '&',
                modalInstance: '<'
            },
            templateUrl: 'app/events/event-create.component.html',
            controller: ['$http', 'toastr', controller]
        });

}
)();
//event-dashboard.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, toastr) {
        var $ctrl = this;

        $ctrl.title = 'Event Manager';
        $ctrl.description = "Manage Donor Events";

        $ctrl.$onInit = function () {
            console.log('event dashboard init');
            
            $http.get('api/event').then(function (r) {
                $ctrl.events = r.data;
            }).catch(function (err) {
                console.log("Oops. Can't get list of events", err);
                toastr.error("Oops. Can't get list of events");
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.create = function() {
            $modal.open({
                component: 'eventCreate',
                bindings: {
                    modalInstance: "<"
                },
                size: 'md'
            }).result.then(function (result) {
                $ctrl.selectedEvent = result;
                $ctrl.events.unshift($ctrl.selectedEvent);
                console.log('selected event', $ctrl.selectedEvent);
                toastr.info('Created Event ' + result.name);
            }, function (reason) {
            });            
        }

        $ctrl.changeEvent = function() {
            
        }

        $ctrl.eventDeleted = function() {
            var idx = $ctrl.events.indexOf($ctrl.selectedEvent);
            $ctrl.events.splice(idx, 1);
            $ctrl.selectedEvent = null; 
        }
    }

    module.component('eventDashboard',
        {
            bindings: {
            },
            templateUrl: 'app/events/event-dashboard.component.html',
            controller: ['$http', '$uibModal', 'toastr', controller]
        });
}
)();
//event-detail.component.js
(function () {
    var module = angular.module('app');

    function parseErrors(response) {
        var errors = [];
        var key;
        for (key in response.modelState) {
            if (response.modelState.hasOwnProperty(key)) {
                for (var i = 0; i < response.modelState[key].length; i++) {
                    if (key === '$id') break;
                    errors.push(response.modelState[key][i]);
                }
            }
        }
        return errors;
    }

    function controller($http, log) {
        var $ctrl = this;

        $ctrl.dateFormat = "MM/DD/YYYY h:mm a";
        $ctrl.hostLocation = window.__env.rsvpUrl + '/';

        $ctrl.$onChanges = function () {
            $ctrl.refresh();
        }

        $ctrl.$onInit = function () { console.log('event detail init'); }

        $ctrl.refresh = function () {
            if ($ctrl.eventId === undefined) return;
            $ctrl.isBusy = true;
            $http.get('api/event/' + $ctrl.eventId).then(function (r) {
                $ctrl.event = r.data;
                console.log($ctrl.event);
            }).catch(function (err) {
                console.log('Opps. Something went wrong', err);
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.delete = function () {
            $http.delete('api/event/' + $ctrl.eventId).then(function (r) {
                $ctrl.event = null;
                log.warning('Deleted event');
                $ctrl.onDelete();
            }).catch(function (err) {
                console.log('Oops. Something went wrong deleting event', err);
                log.error('Oops. Something went wrong deleting event');
            });

        }

        $ctrl.save = function () {
            return $http.put('api/event', $ctrl.event)
                .then(function (r) {
                    angular.extend($ctrl.event, r.data);
                    log.success('Updated ' + $ctrl.event.name);
                }).catch(function (err) {
                    console.log('Oops. Something went wrong saving event');
                    log.error('Oops. Something went wrong saving event');
                    $ctrl.errors = parseErrors(err.data);
                });
        }

        $ctrl.toggleCancel = function () {
            $ctrl.event.isCancelled = !$ctrl.event.isCancelled;
            $ctrl.save();
        }

    }

    module.component('eventDetail',
        {
            bindings: {
                eventId: '<',
                onDelete: '&'
            },
            templateUrl: 'app/events/event-detail.component.html',
            controller: ['$http', 'toastr', controller]
        });
}
)();
//event-template.component.js
(function () {
    var module = angular.module('app');

    function controller($scope, $http, log) {
        var $ctrl = this;

        $ctrl.title = 'Event Template';
        $ctrl.description = "Update Event Template";

        $ctrl.$onChanges = function () {
            $ctrl.refresh();
        }

        $ctrl.$onInit = function () {
            console.log('event template init');
        }

        $ctrl.refresh = function () {
            if ($ctrl.templateId === undefined) return;
            $ctrl.isBusy = true;
            $http.get('api/template/' + $ctrl.templateId).then(function (r) {
                $ctrl.template = r.data;
                $ctrl.templateDelta = angular.copy($ctrl.template); 
            }).catch(function (err) {
                console.log("Oops. Can't get event template", err);
                toastr.error("Oops. Can't get event template");
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.cancel = function() {
            $ctrl.template = angular.copy($ctrl.templateDelta); 
        }

        $ctrl.save = function () {
            $http.put('api/template', $ctrl.template).then(function (r) {
                angular.extend($ctrl.template, r.data);
                $ctrl.templateDelta = angular.copy($ctrl.template);
                log.success('Updated template');
            }).catch(function (err) {
                console.log('Oops. Error updating template', err);
                log.error('Oops. Something went wrong updating template: ' + err.data.message);
            });
        }

        $ctrl.fileSelected = function ($files, $file) {

            $ctrl.isBusy = true;
            var file = $file;

            var src = '';
            var reader = new FileReader();

            reader.onloadstart = function () { }

            reader.onload = function (e) {
                src = reader.result;
                $ctrl.template.image = reader.result;
                $ctrl.template.mimeType = file.type;
                $ctrl.isBusy = false;
            }

            reader.onerror = function (e) {
                console.log('reader error', e);
                log.error('Oops. Error reading image'); 
            }

            reader.onloadend = function (e) {
                //Added due to large images not complete before digest cycle. 
                $scope.$apply();
            };

            reader.readAsDataURL(file);
        };
    }

    module.component('eventTemplate',
        {
            bindings: {
                templateId: '<'
            },
            templateUrl: 'app/events/event-template.component.html',
            controller: ['$scope', '$http', 'toastr', controller]
        });
}
)();
//guest-edit.component.js
(function () {
    var module = angular.module('app');

    function controller($http, log) {
        var $ctrl = this;
        $ctrl.ticketCountList = [];

        $ctrl.$onInit = function () {
            console.log('guest edit init');

            if ($ctrl.resolve) {
                $ctrl.id = $ctrl.resolve.guestId;
                $ctrl.eventId = $ctrl.resolve.eventId;
            }

            getGuestDetails().then(function (r) {
                $ctrl.guest = r;
            }).then(function () {
                $ctrl.title = $ctrl.guest.name || 'New Guest'; 
                for (var i = 1; i < ($ctrl.guest.ticketAllowance || 5) + 1; i++) {
                    $ctrl.ticketCountList.push(i);
                }
            });
        }

        function getGuestDetails() {
            if ($ctrl.id) {
                return $http.get('api/event/guest/' + $ctrl.id).then(function (r) {
                    return r.data;
                }).catch(function (err) {
                    console.log('err', err.message);
                    log.error('Oops. Something went wrong getting guest information');
                });
            } else {
                return $http.get('api/event/' + $ctrl.eventId).then(function (r) {
                    return { eventId: $ctrl.eventId, ticketAllowance: r.data.ticketAllowance }
                }).catch(function (err) {
                    console.log('Opps. Something went wrong getting event', err);
                });
            }
        }

        $ctrl.changeAttending = function () {
            if ($ctrl.guest.isAttending) {
                $ctrl.guest.ticketCount = 1;
            } else {
                $ctrl.guest.ticketCount = null;
            }
        }

        $ctrl.changeTicket = function () {
            $ctrl.guest.isAttending = $ctrl.guest.ticketCount !== null;
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        }

        $ctrl.save = function () {
            $http.post('api/event/' + $ctrl.guest.eventId + '/register/', $ctrl.guest).then(function (r) {
                angular.extend($ctrl.guest, r.data);
                $ctrl.modalInstance.close($ctrl.guest);
            }).catch(function (err) {
                console.log('Oops. Something went wrong', err);
                log.error('Oops. Something went wrong registering guest', err.data.message);
            });
        }
    }

    module.component('guestEdit',
        {
            bindings: {
                guestId: '<',
                eventId: '<',
                resolve: '<',
                close: '&',
                dismiss: '&',
                modalInstance: '<'
            },
            templateUrl: 'app/events/guest-edit.component.html',
            controller: ['$http', 'toastr', controller]
        });

}
)();
//guest-import.component.js
(function () {
    var module = angular.module('app');

    function formDataObject(data) {
        var fd = new FormData();
        fd.append('file', data);
        return fd;
    }

    function controller($http, log) {
        var $ctrl = this;

        $ctrl.title = 'Upload Guest List';

        $ctrl.$onInit = function () {
            console.log('guest import init');
            if ($ctrl.resolve) {
                $ctrl.eventId = $ctrl.resolve.eventId;
            }
        }

        $ctrl.fileSelected = function ($file, $event) {
            $ctrl.result = null;
        };

        $ctrl.cancel = function () {
            $modal.dismiss();
        }

        $ctrl.save = function () {
            $ctrl.isBusy = true; 
            $http.post('api/file/guest/' + $ctrl.eventId, formDataObject($ctrl.file), {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            }).then(function (r) {
                log.success(r.data.messages[0] + ' in ' + r.data.totalTime);
                console.log('response', r.data);
                $ctrl.isBusy = false; 
                $ctrl.modalInstance.close();
            }).catch(function(err) {
                console.log('Oops. Something when wrong', err);
            });
        }

    }

    module.component('guestImport',
        {
            bindings: {
                eventId: '<',
                resolve: '<',
                close: '&',
                dismiss: '&',
                modalInstance: '<'
            },
            templateUrl: 'app/events/guest-import.component.html',
            controller: ['$http', 'toastr', controller]
        });

}
)();
//guest-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, $modal, toastr) {
        var $ctrl = this;
        var tableStateRef;
        var pageSizeDefault = 10;
        var choices =
            [
            { id: 1, name: "Register", command: function (e) { $ctrl.registerGuest(e) }, icon: 'icon ion-key', default: true },
            { id: 2, name: "Mail Ticket", command: function (e) { $ctrl.sendMail(e) }, icon: 'icon ion-android-mail', default: false },
            { id: 3, name: "Cancel", command: function (e) { $ctrl.cancelRegistration(e) }, icon: 'icon ion-android-cancel', default: false },
            { id: 4, name: "Guest List", command: function (e) { $ctrl.reservationOverride(e) }, icon: 'icon ion-android-add-circle', default: false },
            { id: 5, name: "Add Tickets", command: function (e) { $ctrl.registerGuest(e) }, icon: 'icon ion-android-add-circle', default: false }
        ];
        
        $ctrl.title = 'Reservation Manager';
        $ctrl.description = "Manage Guest List";

        $ctrl.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };

        $ctrl.$onChanges = function () {
            $ctrl.search();
        }

        $ctrl.$onInit = function () {
            console.log('guest list init');
        }

        $ctrl.resetSearch = function () {
            $ctrl.searchModel = {
                page: 1,
                pageSize: pageSizeDefault,
                orderBy: 'id',
                orderDirection: 'asc'
            };
            $ctrl.quickFilter = null;
            $ctrl.search(tableStateRef);
        }

        $ctrl.search = function () {
            $ctrl.isBusy = true;
            if ($ctrl.eventId === undefined) return;
            $http.get('api/event/' + $ctrl.eventId + '/guests', { params: $ctrl.searchModel }).then(function (r) {
                $ctrl.searchModel = r.data;
                $ctrl.guests = [];
                r.data.results.map(function (guest) {
                    guest.choices = buildGuestOptions(guest);
                    $ctrl.guests.push(guest);
                });
                delete $ctrl.searchModel.results;
            }).catch(function (err) {
                console.log('Oops. Something went wrong', err);
            }).finally(function () {
                $ctrl.isBusy = false;
            });
        }

        $ctrl.paged = function paged() {
            $ctrl.search(tableStateRef);
        };

        $ctrl.quickFilterChange = function () {
            $ctrl.searchModel.page = 1;
            $ctrl.searchModel.isWaiting = null;
            $ctrl.searchModel.isMailed = null;
            $ctrl.searchModel.isAttending = null;

            $ctrl.showSendMail = null; 
            $ctrl.showSendWaiting = null; 

            switch ($ctrl.quickFilter) {
                case 'WaitingAndNotSent':
                    $ctrl.searchModel.isWaiting = true;
                    $ctrl.searchModel.isMailed = false;
                    $ctrl.showSendWaiting = true; 
                    break;
                case 'WaitingAndSent':
                    $ctrl.searchModel.isWaiting = true;
                    $ctrl.searchModel.isMailed = true;;
                    break;
                case 'TicketNotSent':
                    $ctrl.searchModel.isAttending = true;
                    $ctrl.searchModel.isMailed = false;
                    $ctrl.searchModel.isWaiting = false;
                    $ctrl.showSendMail = true; 
                    break;
                case 'TicketSent':
                    $ctrl.searchModel.isAttending = true;
                    $ctrl.searchModel.isMailed = true;
                    $ctrl.searchModel.isWaiting = false;
                    break;
                default:
            }
            $ctrl.search(tableStateRef);
        }

        $ctrl.reservationOverride = function (e) {
            $http.post('api/event/' + $ctrl.eventId + '/register/', e).then(function (r) {
                var guest = r.data;
                guest.choices = buildGuestOptions(guest);
                angular.extend(e, guest);
                toastr.success('Registered ' + guest.name);
            }).catch(function (err) {
                console.log('Oops. Something went wrong', err);
                toastr.error('Oops. Something went wrong registering guest', err.data.message);
            });
        }

        $ctrl.cancelRegistration = function (e) {
            $http.post('api/event/' + $ctrl.eventId + '/cancelregister/' + e.id).then(function (r) {
                var guest = r.data;
                guest.choices = buildGuestOptions(guest);
                angular.extend(e, guest);
                toastr.success('Canceled registration for ' + guest.name);
            }).catch(function (err) {
                console.log('Oops. Something went wrong', err);
                toastr.error('Oops. Something went wrong cancelling registration', err.data.message);
            });
        }

        $ctrl.registerGuest = function (e) {
            var newGuest = false;
            if (!e) {
                e = { id: null, eventId: $ctrl.eventId }
                newGuest = true;
            }

            $modal.open({
                component: 'guestEdit',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    guestId: e.id,
                    eventId: e.eventId
                },
                size: 'md'
            }).result.then(function (result) {
                result.choices = buildGuestOptions(result);
                angular.extend(e, result);
                if (newGuest) $ctrl.guests.unshift(e);
                toastr.info('Registered ' + result.name);
            }, function (reason) {
            });
        }

        $ctrl.sendMail = function (e) {
            $http.post('api/event/' + $ctrl.eventId + '/mailticket/' + e.id).then(function (r) {
                var guest = r.data;
                guest.choices = buildGuestOptions(guest);
                angular.extend(e, guest);
                toastr.success('Mailed ticket for ' + guest.name);
            }).catch(function (err) {
                console.log('Oops. Something went wrong', err);
                toastr.error('Oops. Something went wrong mailing ticket', err.data.message);
            });
        }

        $ctrl.sendAllMail = function() {
            $http.post('api/event/' + $ctrl.eventId + '/sendalltickets').then(function (r) {
                toastr.success('Mailed all tickets');
            }).catch(function (err) {
                console.log('Oops. Something went wrong', err);
                toastr.error('Oops. Something went wrong mailing tickets', err.data.message);
            });
        }

        $ctrl.sendAllWaiting = function () {
            $http.post('api/event/' + $ctrl.eventId + '/sendallwaiting').then(function (r) {
                toastr.success('Mailed all letters');
            }).catch(function (err) {
                console.log('Oops. Something went wrong', err);
                toastr.error('Oops. Something went wrong mailing letters', err.data.message);
            });
        }

        $ctrl.export = function() {
            $ctrl.isBusy = true;
            $http.get('api/event/' + $ctrl.eventId + '/guests/export', { params: $ctrl.searchModel })
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        logger.log(ex);
                    }
                }).finally(function () {
                    $ctrl.isBusy = false;
                });
        }

        $ctrl.import = function() {
            $modal.open({
                component: 'guestImport',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    eventId: $ctrl.eventId
                },
                size: 'md'
            }).result.then(function (result) {
                $ctrl.search(tableStateRef);
            }, function (reason) {
            });
        }

        function buildGuestOptions(guest) {
            var options = [];

            if (guest.canRegister) options.push(choices[0]);
            if (guest.canMail) options.push(choices[1]);
            if (guest.canAddToAttending) options.push(choices[3]);

            if (guest.canAddTickets) options.push(choices[4]);
            if (guest.canCancel) options.push(choices[2]);

            guest.primaryChoice = angular.copy(options[0]);
            options.shift();
            return options;
        }

    }

    module.component('guestList',
        {
            bindings: {
                eventId: '<'
            },
            templateUrl: 'app/events/guest-list.component.html',
            controller: ['$http', '$uibModal', 'toastr', controller]
        });

}
)();
//mailer-list.component.js
(function () {
    var module = angular.module('app');

    function controller($http, toastr, $modal) {
        var $ctrl = this;
        var tableStateRef;
        var pageSizeDefault = 10;

        $ctrl.title = 'MarkIt Manager';
        $ctrl.subTitle = 'Mailers';

        $ctrl.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            //orderBy: 'campaignId',
            //orderDirection: 'desc',
            suppress: false
        };

        $ctrl.$onInit = function () {
            console.log('mail list init');
            $http.get('api/mailer/campaigns').then(function (r) {
                $ctrl.campaigns = r.data;
            });
            $http.get('api/mailer/reasons').then(function (r) {
                $ctrl.reasons = r.data;
            });
        }

        $ctrl.download = function () {
            $ctrl.isBusy = true;
            $http.post('api/mailer/export', $ctrl.searchModel)
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        console.log(ex);
                        toastr.error('Oops ' + ex.data.message);
                    }
                }).finally(function () {
                    $ctrl.isBusy = false;
                });
        }

        $ctrl.search = function (tableState) {
            tableStateRef = tableState;
            $ctrl.isBusy = true;

            if (typeof (tableState.sort.predicate) !== "undefined") {
                $ctrl.searchModel.orderBy = tableState.sort.predicate;
                $ctrl.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }

            if ($ctrl.searchModel.suppress === null) $ctrl.searchModel.suppress = false;
            return $http.get('api/mailer', { params: $ctrl.searchModel })
                .then(function (r) {
                    console.log('r', r.data);
                    $ctrl.mailers = r.data.results;
                    $ctrl.searchModel = r.data;
                    delete $ctrl.searchModel.results;
                }).catch(function (err) {
                    console.log('Oops', err.data.message);
                    toastr.error('Oops ' + err.data.message);
                }).finally(function () {
                    $ctrl.isBusy = false;
                });
        }

        $ctrl.showUpload = function () {
            $modal.open({
                component: 'mailerUpload',
                bindings: {
                    modalInstance: "<"
                },
                size: 'md'
            }).result.then(function (result) {
                toastr.info('Uploaded ' + result.title);
            }, function (reason) {
            });
        }

        $ctrl.paged = function paged() {
            $ctrl.search(tableStateRef);
        };

        $ctrl.toggleFilter = function () {
            $ctrl.showSuppress = !$ctrl.showSuppress;
            $ctrl.searchModel.suppress = $ctrl.showSuppress;
            $ctrl.search(tableStateRef);
        }

        $ctrl.toggleSuppress = function (mailer) {
            $ctrl.isBusy = true; 
            if (mailer.suppress) {
                mailer.suppress = false;
                mailer.reasonId = null;
                $ctrl.isBusy = true;
                return $http.put('api/mailer', mailer).then(function (r) {
                    angular.extend(mailer, r.data);
                }).catch(function (err) {
                    console.log('Error saving mailer', err.message);
                    $toastr.error('Oops ' + err.data.message);
                }).finally(function () {
                    $ctrl.isBusy = false;
                });
            } else {
                $modal.open({
                    component: 'mailerSuppress',
                    bindings: {
                        modalInstance: "<"
                    },
                    resolve: {
                        mailer: mailer
                    },
                    size: 'md'
                }).result.then(function (result) {
                    angular.extend(mailer, result);
                    toastr.info('Saved ' + result.firstName + ' ' + result.lastName);
                }, function (reason) {
                });
            }
            $ctrl.isBusy = false; 
        }
    }

    module.component('mailerList',
        {
            templateUrl: 'app/mailers/mailer-list.component.html',
            controller: ['$http', 'toastr', '$uibModal', controller]
        });
}
)();
//mailer-suppress.component.js
(function () {
    var module = angular.module('app');

    function controller($http) {
        var $ctrl = this;

        $ctrl.$onInit = function () {
            console.log('mailer suppress init');
            if ($ctrl.resolve) {
                $ctrl.mailer = $ctrl.resolve.mailer;
                $ctrl.title = $ctrl.mailer.firstName + ' ' + $ctrl.mailer.lastName;
            }

            $http.get('api/mailer/reasons').then(function (r) {
                $ctrl.reasons = r.data;
            });
        }

        $ctrl.cancel = function() {
            $ctrl.dismiss();    
        }

        $ctrl.save = function () {
            $ctrl.mailer.suppress = true; 
            return $http.put('api/mailer', $ctrl.mailer).then(function (r) {
                angular.extend($ctrl.mailer, r.data);
                $ctrl.modalInstance.close($ctrl.mailer);
            }).catch(function (err) {
                console.log('Error saving mailer', err.message);
            }).finally(function () {
            });
        }
    };

    module.component('mailerSuppress',
        {
            templateUrl: 'app/mailers/mailer-suppress.component.html',
            bindings: {
                id: '<',
                resolve: '<',
                close: '&',
                dismiss: '&',
                modalInstance: '<'
            },
            controller: ['$http', controller]
        });
}
)();
//mailer-upload.component.js
(function () {
    var module = angular.module('app');

    function formDataObject(data) {
        var fd = new FormData();
        fd.append('file', data);
        return fd;
    }

    function controller($http, toastr) {
        var $ctrl = this;
        $ctrl.title = 'Mailer Upload';

        $ctrl.$onInit = function () {
            console.log('Mailer Upload Init');
            $http.get('api/mailer/campaigns').then(function (r) {
                $ctrl.campaigns = r.data;
            });
        }

        $ctrl.cancel = function () {
            $ctrl.file = undefined;
            $ctrl.dismiss();
        }

        $ctrl.fileSelected = function ($file, $event) {
            $ctrl.result = null;
        };

        $ctrl.saveCampaign = function () {
            $http.post('api/mailer/createcampaign', $ctrl.campaign).then(function (r) {
                $ctrl.campaigns.unshift(r.data);
                $ctrl.selectedCampaign = r.data;
                $ctrl.showCreate = false;
            }).catch(function (err) {
                toastr.error('Oops ' + err.data.message);
            });
        }

        $ctrl.upload = function () {
            $ctrl.isBusy = true;
            $ctrl.result = {
                success: false
            }
            var id = $ctrl.selectedCampaign.id; 

            return $http.post('api/file/mailer/' + id, formDataObject($ctrl.file), {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            }).then(function (r) {
                $ctrl.result.success = true;
                $ctrl.result.message = r.data.message[0];
            }).catch(function (error) {
                $ctrl.result.message = error.data.message;
            }).finally(function () {
                $ctrl.file = undefined;
                $ctrl.isBusy = false;
                $ctrl.result.campaigns = $ctrl.campaigns;
                $ctrl.modalInstance.close($ctrl.result);
            });

            //service.mailer(vm.selectedCampaign.id, vm.file)
            //    .then(function (data) {
            //        $ctrl.result.success = true;
            //        $ctrl.result.message = data;
            //    })
            //    .catch(function (error) {
            //        $ctrl.result.message = error.data.message;
            //    })
            //    .finally(function () {
            //        $ctrl.file = undefined;
            //        $ctrl.isBusy = false;
            //        $ctrl.result.campaigns = $ctrl.campaigns;
            //        $ctrl.modalInstance.close($ctrl.result);
            //    });
        }
    }

    module.component('mailerUpload',
        {
            bindings: {
                id: '<',
                resolve: '<',
                close: '&',
                dismiss: '&',
                modalInstance: '<'
            },
            templateUrl: 'app/mailers/mailer-upload.component.html',
            controller: ['$http', 'toastr', controller]
        });

}
)();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
